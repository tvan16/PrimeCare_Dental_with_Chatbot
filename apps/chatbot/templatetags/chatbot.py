import json
import os
import numpy as np
import re
import faiss
from enum import Enum, auto
from dataclasses import dataclass
from typing import List, Dict, Any, Optional, Tuple
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure Gemini API
import google.generativeai as genai
API_KEY = os.environ.get("GEMINI_API_KEY")
if not API_KEY:
    raise ValueError("GEMINI_API_KEY not found in environment variables or .env file")
genai.configure(api_key=API_KEY)

# Available Gemini models to try
GEMINI_MODELS = ["gemini-2.0-flash"]

# Welcome messages
WELCOME_MESSAGES = [
    "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Nha khoa PrimeCare. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√¥ng tin v·ªÅ c√°c d·ªãch v·ª•, b√°c sƒ© c·ªßa ch√∫ng t√¥i ho·∫∑c gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ nha khoa. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üòä",
    "üëã Hello! I'm the virtual assistant for PrimeCare Dental Clinic. I can help you learn about our services, doctors, or answer dental questions. How can I assist you today? üòä"
]

# Appointment booking message
BOOKING_MESSAGE_VI = "\n\nüìÖ **ƒê·∫∑t l·ªãch h·∫πn:** B·∫°n c√≥ th·ªÉ [ƒë·∫∑t l·ªãch h·∫πn tr·ª±c tuy·∫øn](frontend/pages/contact.html) ho·∫∑c g·ªçi s·ªë 1900-6900 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp."
BOOKING_MESSAGE_EN = "\n\nüìÖ **Book an appointment:** You can [book an appointment online](frontend/pages/contact.html) or call 1900-6900 for direct assistance."

class AgentRole(Enum):
    DENTAL_CONSULTANT = auto()
    CUSTOMER_SERVICE = auto()

@dataclass
class Message:
    role: str  # "user" or "assistant"
    content: str
    agent_type: Optional[AgentRole] = None

class EmbeddingModel:
    def __init__(self):
        # Import here to ensure dependencies are available
        try:
            from transformers import AutoTokenizer, AutoModel
            import torch
            
            # Load pre-trained model and tokenizer
            self.tokenizer = AutoTokenizer.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")
            self.model = AutoModel.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")
            self.device = "cuda" if torch.cuda.is_available() else "cpu"
            self.model.to(self.device)
            self.model_loaded = True
        except Exception as e:
            print(f"Warning: Could not load embedding model: {str(e)}")
            print("Falling back to simple embedding method")
            self.model_loaded = False
            
    def get_embeddings(self, texts):
        """Convert texts to embeddings"""
        if not self.model_loaded:
            # Fallback to simple embedding method
            return self._get_simple_embeddings(texts)
            
        try:
            import torch
            
            # Tokenize the input texts
            encoded_input = self.tokenizer(texts, padding=True, truncation=True, 
                                          max_length=512, return_tensors='pt').to(self.device)
            
            # Get embeddings without gradient calculation
            with torch.no_grad():
                model_output = self.model(**encoded_input)
                
            # Use CLS token embedding as the sentence embedding
            sentence_embeddings = model_output[0][:, 0]
            # Normalize the embeddings
            sentence_embeddings = torch.nn.functional.normalize(sentence_embeddings, p=2, dim=1)
            
            return sentence_embeddings.cpu().numpy()
        except Exception as e:
            print(f"Error during embedding generation: {str(e)}")
            print("Falling back to simple embedding method")
            return self._get_simple_embeddings(texts)
    
    def _get_simple_embeddings(self, texts):
        """Simple fallback embedding method using character frequency"""
        import numpy as np
        
        # Create a simple character-based embedding (not ideal but works as fallback)
        embeddings = []
        
        for text in texts:
            # Count character frequencies (simple embedding)
            # Expanded to support Vietnamese characters
            char_freq = {}
            for char in text:
                if char in char_freq:
                    char_freq[char] += 1
                else:
                    char_freq[char] = 1
                    
            # Convert to vector and normalize
            chars = sorted(char_freq.keys())
            vec = np.array([char_freq[c] for c in chars])
            total = sum(vec) + 1e-10  # Avoid division by zero
            vec = vec / total
            
            # Create fixed-size embedding by hashing
            embedding = np.zeros(384)
            for i, val in enumerate(vec):
                idx = hash(chars[i]) % 384
                embedding[idx] += val
                
            embeddings.append(embedding)
            
        return np.array(embeddings)

class DataProcessor:
    def __init__(self, dental_path: str, doctor_path: str, price_path: str = "data/service-prices.json", financial_path: str = "data/financial_services.json"):
        self.embedding_model = EmbeddingModel()
        self.dental_data = self._load_json(dental_path)
        self.doctor_data = self._load_json(doctor_path)
        self.dental_index, self.dental_texts = self._create_vector_index(self.dental_data, "dental")
        self.doctor_index, self.doctor_texts = self._create_vector_index(self.doctor_data, "doctor")
        
        # Kh·ªüi t·∫°o processors cho gi√° d·ªãch v·ª• v√† d·ªãch v·ª• t√†i ch√≠nh
        self.price_processor = PriceProcessor(price_path)
        self.financial_processor = FinancialProcessor(financial_path)
        
    def _load_json(self, path: str) -> List[Dict[str, Any]]:
        with open(path, 'r', encoding='utf-8') as file:
            return json.load(file)
            
    def _create_vector_index(self, data: List[Dict[str, Any]], data_type: str):
        # Extract text content from JSON data
        texts = []
        for item in data:
            if data_type == "dental":
                # Handle dental articles from news.detail.json
                title = item.get('title', '')
                content_parts = []
                
                # Extract content from sections
                sections = item.get('sections', [])
                for section in sections:
                    heading = section.get('heading', '')
                    content = section.get('content', '')
                    content_parts.append(f"{heading}: {content}")
                
                content = " ".join(content_parts)
                texts.append(f"{title} {content}")
            else:  # doctor
                # Handle doctor information from doctors.json
                name = item.get('name', '')
                area = item.get('area', '')
                education = item.get('education', '')
                certificate = item.get('certificate', '')
                texts.append(f"{name} {area} {education} {certificate}")
                
        # Create embeddings
        embeddings = self.embedding_model.get_embeddings(texts)
        
        # Create FAISS index
        try:
            dimension = embeddings.shape[1]
            index = faiss.IndexFlatL2(dimension)
            index.add(embeddings.astype(np.float32))
        except Exception as e:
            print(f"Error creating index: {str(e)}")
            # Create a dummy index
            dimension = embeddings.shape[1]
            index = faiss.IndexFlatL2(dimension)
            # Add a small amount of data to avoid empty index
            if len(embeddings) > 0:
                index.add(embeddings[0:1].astype(np.float32))
        
        return index, texts
        
    def search_dental_data(self, query: str, k: int = 3):
        query_vector = self.embedding_model.get_embeddings([query])
        distances, indices = self.dental_index.search(query_vector.astype(np.float32), k)
        results = [self.dental_data[i] for i in indices[0]]
        
        # Extract the URLs for the "T√¨m hi·ªÉu th√™m" section
        for result in results:
            if 'url' not in result:
                result['url'] = "https://primecare.vn"  # Default URL if none found
        
        return results
        
    def search_doctor_data(self, query: str, k: int = 5):
        query_vector = self.embedding_model.get_embeddings([query])
        distances, indices = self.doctor_index.search(query_vector.astype(np.float32), k)
        return [self.doctor_data[i] for i in indices[0]]

    def get_doctor_count(self):
        """Return the total number of doctors"""
        return len(self.doctor_data)
    
    def get_doctor_names(self):
        """Return a list of all doctor names"""
        return [doc.get('name', 'Unknown') for doc in self.doctor_data]
    
    def get_doctors_by_region(self, region: str, limit: int = 5) -> List[Dict[str, Any]]:
        """Get doctors by region (mi·ªÅn Nam, mi·ªÅn B·∫Øc, mi·ªÅn Trung)"""
        # Normalize region names to handle variations
        normalized_region = region.lower()
        region_mapping = {
            "mi·ªÅn nam": ["mi·ªÅn nam", "ph√≠a nam", "nam"],
            "mi·ªÅn b·∫Øc": ["mi·ªÅn b·∫Øc", "ph√≠a b·∫Øc", "b·∫Øc"],
            "mi·ªÅn trung": ["mi·ªÅn trung", "ph√≠a trung", "trung"]
        }
        
        # Find the standardized region
        target_region = None
        for std_region, variations in region_mapping.items():
            if any(variation in normalized_region for variation in variations):
                target_region = std_region
                break
        
        if target_region is None:
            return []
            
        # Match the standardized region to the actual values in the data
        matching_doctors = []
        for doctor in self.doctor_data:
            doctor_area = doctor.get('area', '').lower()
            
            # Check if the doctor's area matches any variation of the target region
            for variation in region_mapping[target_region]:
                if variation in doctor_area:
                    matching_doctors.append(doctor)
                    break
                    
        return matching_doctors[:limit]
    
    def get_doctors_by_education(self, education_query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """Get doctors by education (university or training)"""
        education_query = education_query.lower()
        matching_doctors = []
        
        for doctor in self.doctor_data:
            doctor_education = doctor.get('education', '').lower()
            
            if education_query in doctor_education:
                matching_doctors.append(doctor)
                
        return matching_doctors[:limit]
    
    def get_doctors_by_certificate(self, certificate_query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """Get doctors by certificate"""
        certificate_query = certificate_query.lower()
        matching_doctors = []
        
        for doctor in self.doctor_data:
            doctor_certificate = doctor.get('certificate', '').lower()
            
            if certificate_query in doctor_certificate:
                matching_doctors.append(doctor)
                
        return matching_doctors[:limit]
    
    def get_price_info(self, query: str, is_vietnamese: bool = True) -> str:
        """L·∫•y th√¥ng tin gi√° cho m·ªôt d·ªãch v·ª• c·ª• th·ªÉ"""
        # Th·ª≠ t√¨m ki·∫øm d·ªãch v·ª• ch√≠nh x√°c
        exact_match = False
        
        # Ki·ªÉm tra xem query c√≥ ch·ª©a t·ª´ "invisalign express" kh√¥ng
        if "invisalign express" in query.lower() or "ni·ªÅng trong su·ªët express" in query.lower():
            services = self.price_processor.get_service_by_exact_name("G√≥i ni·ªÅng trong su·ªët Invisalign Express")
            if services:
                exact_match = True
        
        # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ch√≠nh x√°c, d√πng t√¨m ki·∫øm th√¥ng th∆∞·ªùng
        if not exact_match:
            services = self.price_processor.search_service(query)
        
        # N·∫øu v·∫´n kh√¥ng c√≥ k·∫øt qu·∫£, th·ª≠ t√¨m m·ªôt s·ªë t·ª´ kh√≥a ƒë·∫∑c bi·ªát
        if not services:
            special_keywords = {
                "invisalign": "G√≥i ni·ªÅng trong su·ªët",
                "ni·ªÅng rƒÉng": "ni·ªÅng rƒÉng",
                "implant": "Implant",
                "tr·ªìng rƒÉng": "Implant",
                "veneer": "veneer",
                "d√°n s·ª©": "veneer",
                "t·∫©y tr·∫Øng": "T·∫©y tr·∫Øng"
            }
            
            for keyword, search_term in special_keywords.items():
                if keyword in query.lower():
                    services = self.price_processor.search_service(search_term)
                    if services:
                        break
        
        return self.price_processor.format_price_info(services, is_vietnamese)
    
    def get_affordable_services(self, budget: float, is_vietnamese: bool = True) -> str:
        """G·ª£i √Ω d·ªãch v·ª• d·ª±a tr√™n ng√¢n s√°ch"""
        affordable_services = self.price_processor.get_services_by_budget(budget)
        return self.price_processor.format_budget_recommendations(budget, affordable_services, is_vietnamese)
    
    def get_payment_plans(self, is_vietnamese: bool = True) -> str:
        """L·∫•y th√¥ng tin v·ªÅ c√°c k·∫ø ho·∫°ch thanh to√°n"""
        return self.financial_processor.get_payment_plans(is_vietnamese)
    
    def get_special_promotions(self, is_vietnamese: bool = True) -> str:
        """L·∫•y th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒë·∫∑c bi·ªát"""
        return self.financial_processor.get_special_promotions(is_vietnamese)
    
    def get_current_promotions(self, is_vietnamese: bool = True) -> str:
        """L·∫•y th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán t·∫°i"""
        return self.financial_processor.get_current_seasonal_promotions(is_vietnamese)
    
    def get_all_promotions(self, is_vietnamese: bool = True) -> str:
        """L·∫•y th√¥ng tin v·ªÅ t·∫•t c·∫£ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i theo m√πa"""
        return self.financial_processor.get_all_seasonal_promotions(is_vietnamese)

class PriceProcessor:
    def __init__(self, price_data_path: str):
        self.price_data = self._load_price_data(price_data_path)
        self.categories = self._extract_categories()
        self.price_ranges = self._calculate_price_ranges()

        # T·ª´ ƒëi·ªÉn ƒë·ªìng nghƒ©a m·ªü r·ªông cho c√°c d·ªãch v·ª•
        self.service_synonyms = {
            # Ni·ªÅng rƒÉng
            "ni·ªÅng rƒÉng invisalign": ["ni·ªÅng trong su·ªët", "invisalign", "ni·ªÅng trong", "ni·ªÅng su·ªët", "ni·ªÅng th√°o l·∫Øp"],
            "ni·ªÅng rƒÉng invisalign express": ["invisalign express", "ni·ªÅng express", "express invisalign", "ni·ªÅng nhanh"],
            "ni·ªÅng rƒÉng invisalign lite": ["invisalign lite", "ni·ªÅng lite", "lite invisalign", "ni·ªÅng ng·∫Øn h·∫°n"],
            "ni·ªÅng rƒÉng invisalign moderate": ["invisalign moderate", "moderate invisalign", "ni·ªÅng trung b√¨nh"],
            "ni·ªÅng rƒÉng invisalign comprehensive": ["invisalign comprehensive", "comprehensive invisalign", "ni·ªÅng to√†n di·ªán"],
            "ni·ªÅng rƒÉng invisalign first": ["invisalign first", "first invisalign", "ni·ªÅng cho tr·∫ª em"],
            "ni·ªÅng rƒÉng m·∫Øc c√†i s·ª©": ["m·∫Øc c√†i s·ª©", "ni·ªÅng s·ª©", "ni·ªÅng rƒÉng s·ª©", "braces s·ª©"],
            "ni·ªÅng rƒÉng m·∫Øc c√†i kim lo·∫°i": ["m·∫Øc c√†i kim lo·∫°i", "ni·ªÅng kim lo·∫°i", "braces kim lo·∫°i"],
            "ni·ªÅng rƒÉng m·∫Øc c√†i pha l√™": ["m·∫Øc c√†i pha l√™", "ni·ªÅng pha l√™", "braces pha l√™"],
            
            # Implant
            "tr·ªìng rƒÉng implant": ["c·∫•y gh√©p implant", "implant", "c·∫•y rƒÉng", "gh√©p rƒÉng"],
            "implant straumann": ["c·∫•y gh√©p straumann", "straumann", "rƒÉng straumann"],
            "implant neodent": ["c·∫•y gh√©p neodent", "neodent", "rƒÉng neodent", "neodent acqua"],
            "implant dentium": ["c·∫•y gh√©p dentium", "dentium", "rƒÉng dentium"],
            "all-on-4": ["all on 4", "all on four", "tr·ªìng rƒÉng to√†n h√†m", "ph·ª•c h√¨nh to√†n h√†m"],
            "c·∫•y gh√©p implant combo": ["combo implant", "g√≥i implant", "tr·ªìng rƒÉng tr·ªçn g√≥i"],
            
            # Nha khoa t·ªïng qu√°t
            "nh·ªï rƒÉng kh√¥n": ["rƒÉng kh√¥n", "nh·ªï rƒÉng s·ªë 8", "rƒÉng s·ªë 8", "rƒÉng g√≥c"],
            "nh·ªï rƒÉng th∆∞·ªùng": ["nh·ªï rƒÉng", "r√∫t rƒÉng", "r√∫t rƒÉng th∆∞·ªùng"],
            "ƒëi·ªÅu tr·ªã t·ªßy": ["ch·ªØa t·ªßy", "tr·ªã t·ªßy", "l·∫•y t·ªßy", "root canal"],
            "ƒëi·ªÅu tr·ªã nha chu": ["tr·ªã nha chu", "ch·ªØa nha chu", "vi√™m nha chu", "n∆∞·ªõu"],
            "l·∫•y cao rƒÉng": ["c·∫°o v√¥i rƒÉng", "v·ªá sinh rƒÉng", "l√†m s·∫°ch rƒÉng"],
            "tr√°m rƒÉng": ["h√†n rƒÉng", "b·ªãt rƒÉng", "l·∫•p l·ªó s√¢u", "tr√°m rƒÉng s√¢u"],
            
            # Nha khoa th·∫©m m·ªπ
            "rƒÉng s·ª©": ["b·ªçc rƒÉng s·ª©", "crown s·ª©", "m√£o s·ª©", "m√£o rƒÉng"],
            "rƒÉng s·ª© emax": ["emax", "s·ª© emax", "b·ªçc emax", "m√£o emax"],
            "rƒÉng s·ª© zirconia": ["zirconia", "zircad", "rƒÉng zirconia", "b·ªçc zirconia"],
            "d√°n s·ª© veneer": ["veneer", "m·∫∑t d√°n", "d√°n rƒÉng", "d√°n s·ª©"],
            "t·∫©y tr·∫Øng rƒÉng": ["l√†m tr·∫Øng rƒÉng", "l√†m tr·∫Øng", "t·∫©y rƒÉng", "rƒÉng tr·∫Øng"],
            "t·∫©y tr·∫Øng express": ["t·∫©y nhanh", "l√†m tr·∫Øng nhanh", "t·∫©y c·∫•p t·ªëc"],
            "t·∫©y tr·∫Øng zoom laser": ["zoom laser", "t·∫©y laser", "l√†m tr·∫Øng laser"],
            
            # Nha khoa tr·∫ª em
            "nha khoa tr·∫ª em": ["rƒÉng tr·∫ª em", "nha khoa nhi", "rƒÉng tr·∫ª", "rƒÉng s·ªØa"],
            "tr√°m rƒÉng s·ªØa": ["h√†n rƒÉng s·ªØa", "tr√°m rƒÉng tr·∫ª em"],
            "nh·ªï rƒÉng s·ªØa": ["r√∫t rƒÉng s·ªØa", "nh·ªï rƒÉng tr·∫ª em"],
            
            # Nha khoa ph·ª•c h·ªìi
            "ph·ª•c h√¨nh": ["ph·ª•c h·ªìi rƒÉng", "l√†m l·∫°i rƒÉng", "t√°i t·∫°o rƒÉng"],
            "c·∫ßu rƒÉng": ["bridge", "c·∫ßu rƒÉng s·ª©", "c·∫ßu n·ªëi rƒÉng"],
            "ph·ª•c h√¨nh th√°o l·∫Øp": ["h√†m gi·∫£", "rƒÉng gi·∫£ th√°o l·∫Øp", "denture"],
            "inlay": ["onlaSSy", "tr√°m ƒë√∫c", "tr√°m s·ª©"]
        }

    def _load_price_data(self, path: str) -> Dict[str, Any]:
        """T·∫£i d·ªØ li·ªáu gi√° t·ª´ file JSON"""
        try:
            with open(path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except Exception as e:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu gi√°: {str(e)}")
            return {"metadata": {}, "services_by_category": {}}
    
    def _extract_categories(self) -> List[str]:
        """Tr√≠ch xu·∫•t danh s√°ch c√°c lo·∫°i d·ªãch v·ª•"""
        return list(self.price_data.get("services_by_category", {}).keys())
    
    def _calculate_price_ranges(self) -> Dict[str, Tuple[float, float]]:
        """T√≠nh to√°n kho·∫£ng gi√° cho m·ªói danh m·ª•c d·ªãch v·ª•"""
        price_ranges = {}
        
        for category, services in self.price_data.get("services_by_category", {}).items():
            min_price = float('inf')
            max_price = 0
            
            for service in services:
                price_display = service.get("Gi√° hi·ªÉn th·ªã", "")
                if price_display:
                    # Tr√≠ch xu·∫•t s·ªë t·ª´ chu·ªói gi√°
                    numbers = re.findall(r'\d+(?:\.\d+)?', price_display.replace(',', ''))
                    if numbers:
                        try:
                            numbers = [float(num) for num in numbers]
                            min_price = min(min_price, min(numbers))
                            max_price = max(max_price, max(numbers))
                        except:
                            pass
            
            if min_price != float('inf') and max_price > 0:
                price_ranges[category] = (min_price, max_price)
                
        return price_ranges
    
    def get_all_categories(self) -> List[str]:
        """Tr·∫£ v·ªÅ t·∫•t c·∫£ danh m·ª•c d·ªãch v·ª•"""
        return self.categories
    
    def get_services_by_category(self, category: str) -> List[Dict[str, Any]]:
        """L·∫•y t·∫•t c·∫£ d·ªãch v·ª• trong m·ªôt danh m·ª•c"""
        if category in self.categories:
            return self.price_data["services_by_category"][category]
        return []
    
    def search_service(self, query: str) -> List[Dict[str, Any]]:
        """T√¨m ki·∫øm d·ªãch v·ª• ph√π h·ª£p v·ªõi t·ª´ kh√≥a"""
        if not query or not isinstance(query, str) or len(query.strip()) < 2:
            return []
            
        query = query.lower().strip()
        results = []
        
        # Lo·∫°i b·ªè c√°c t·ª´ ph·ªï bi·∫øn kh√¥ng li√™n quan
        stop_words = ["gi√°", "chi ph√≠", "ph√≠", "bao nhi√™u", "ti·ªÅn", "ƒë·∫Øt", "r·∫ª", 
                    "b√°o gi√°", "d·ªãch v·ª•", "l√†", "c√≥", "c·ªßa", "th·∫ø n√†o"]
        for word in stop_words:
            query = query.replace(word, " ")
            
        # Chu·∫©n h√≥a truy v·∫•n
        query = " ".join(query.split())
        
        # T√°ch query th√†nh c√°c t·ª´ kh√≥a ri√™ng l·∫ª
        query_words = query.split()
        
        # Ki·ªÉm tra t·ª´ ƒë·ªìng nghƒ©a v√† m·ªü r·ªông truy v·∫•n
        expanded_queries = [query]
        
        # Th√™m c√°c truy v·∫•n m·ªü r·ªông t·ª´ t·ª´ ƒëi·ªÉn ƒë·ªìng nghƒ©a
        for service, synonyms in self.service_synonyms.items():
            for synonym in synonyms:
                if synonym in query:
                    if service not in expanded_queries:
                        expanded_queries.append(service)
                    break
        
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        service_specific_words = {
            "invisalign express": ["express", "invisalign", "ni·ªÅng trong su·ªët express"],
            "ni·ªÅng rƒÉng": ["ni·ªÅng", "braces", "ch·ªânh nha"],
            "tr·ªìng rƒÉng": ["implant", "c·∫•y gh√©p", "tr·ªìng"],
            "t·∫©y tr·∫Øng": ["t·∫©y", "l√†m tr·∫Øng", "whitening"],
            "veneer": ["d√°n s·ª©", "m·∫∑t d√°n", "d√°n rƒÉng"]
        }
        
        for service, keywords in service_specific_words.items():
            if any(keyword in query for keyword in keywords):
                expanded_queries.append(service)
        
        # Th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi c√°c truy v·∫•n m·ªü r·ªông
        matched_services = {}  # D√πng dict ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        
        for expanded_query in expanded_queries:
            for category, services in self.price_data.get("services_by_category", {}).items():
                for service in services:
                    if "T√™n d·ªãch v·ª•" not in service or not isinstance(service.get("T√™n d·ªãch v·ª•"), str):
                        continue
                        
                    service_name = service.get("T√™n d·ªãch v·ª•", "").lower()
                    
                    # Ki·ªÉm tra match to√†n b·ªô ho·∫∑c t·ª´ng ph·∫ßn
                    if expanded_query in service_name:
                        service_copy = service.copy()
                        service_copy["Danh m·ª•c"] = category
                        
                        # S·ª≠ d·ª•ng t√™n d·ªãch v·ª• l√†m key ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                        matched_services[service_name] = service_copy
                        continue
                        
                    # Ki·ªÉm tra match t·ª´ng t·ª´
                    matched_words = 0
                    important_words = 0
                    for word in query_words:
                        if len(word) > 2 and word in service_name:
                            matched_words += 1
                            # T·ª´ quan tr·ªçng c√≥ tr·ªçng s·ªë cao h∆°n
                            if word in ["invisalign", "express", "implant", "straumann", "veneer", "emax"]:
                                important_words += 1
                    
                    # N·∫øu kh·ªõp ƒë·ªß t·ª´ quan tr·ªçng ho·∫∑c nhi·ªÅu t·ª´ th√¥ng th∆∞·ªùng
                    if important_words >= 1 or matched_words >= 2:
                        service_copy = service.copy()
                        service_copy["Danh m·ª•c"] = category
                        matched_services[service_name] = service_copy
        
        # Chuy·ªÉn k·∫øt qu·∫£ t·ª´ dict sang list
        results = list(matched_services.values())
        
        # S·∫Øp x·∫øp k·∫øt qu·∫£ theo ƒë·ªô ph√π h·ª£p
        if results and query_words:
            # T√≠nh ƒëi·ªÉm ph√π h·ª£p
            def relevance_score(service):
                name = service.get("T√™n d·ªãch v·ª•", "").lower()
                score = 0
                
                # ∆Øu ti√™n n·∫øu t√™n d·ªãch v·ª• ch·ª©a to√†n b·ªô truy v·∫•n
                if query in name:
                    score += 100
                
                # T√≠nh ƒëi·ªÉm cho t·ª´ng t·ª´ kh√≥a ph√π h·ª£p
                for word in query_words:
                    if word in name:
                        score += len(word)  # T·ª´ d√†i c√≥ ƒëi·ªÉm cao h∆°n
                
                return score
                
            # S·∫Øp x·∫øp k·∫øt qu·∫£ theo ƒëi·ªÉm gi·∫£m d·∫ßn
            results.sort(key=relevance_score, reverse=True)
        
        return results
    
    def get_services_by_budget(self, budget: float) -> Dict[str, List[Dict[str, Any]]]:
        """T√¨m d·ªãch v·ª• ph√π h·ª£p v·ªõi ng√¢n s√°ch"""
        affordable_services = {}
        
        for category, services in self.price_data.get("services_by_category", {}).items():
            category_services = []
            
            for service in services:
                # L·∫•y gi√° khuy·∫øn m√£i n·∫øu c√≥, n·∫øu kh√¥ng th√¨ l·∫•y gi√° g·ªëc
                price_str = service.get("Gi√° khuy·∫øn m√£i", service.get("Gi√° g·ªëc", ""))
                
                # Tr√≠ch xu·∫•t s·ªë t·ª´ chu·ªói gi√°
                numbers = re.findall(r'\d+(?:\.\d+)?', price_str.replace(',', ''))
                if numbers:
                    try:
                        numbers = [float(num) for num in numbers]
                        min_price = min(numbers)
                        
                        # N·∫øu gi√° th·∫•p nh·∫•t trong d·∫£i gi√° n·∫±m trong ng√¢n s√°ch
                        if min_price <= budget:
                            service_copy = service.copy()
                            service_copy["Danh m·ª•c"] = category
                            category_services.append(service_copy)
                    except:
                        pass
            
            if category_services:
                affordable_services[category] = category_services
                
        return affordable_services
    
    def format_price_info(self, services: List[Dict[str, Any]], is_vietnamese: bool = True) -> str:
        """ƒê·ªãnh d·∫°ng th√¥ng tin gi√° ƒë·ªÉ hi·ªÉn th·ªã"""
        if not services:
            if is_vietnamese:
                return "Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° cho d·ªãch v·ª• n√†y. Vui l√≤ng th·ª≠ t√¨m ki·∫øm v·ªõi t√™n d·ªãch v·ª• kh√°c ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt."
            else:
                return "No price information found for this service. Please try with a different service name or contact us directly for detailed consultation."
        
        if is_vietnamese:
            result = "üí≤ **TH√îNG TIN GI√Å D·ªäCH V·ª§:**\n\n"
        else:
            result = "üí≤ **SERVICE PRICE INFORMATION:**\n\n"
                
        for i, service in enumerate(services):
            # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ hi·ªÉn th·ªã n·∫øu c√≥ qu√° nhi·ªÅu
            if i >= 5:  # T·ªëi ƒëa hi·ªÉn th·ªã 5 d·ªãch v·ª•
                if is_vietnamese:
                    result += f"\n... v√† {len(services) - 5} d·ªãch v·ª• kh√°c ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
                else:
                    result += f"\n... and {len(services) - 5} other services matching your request."
                break
                
            name = service.get("T√™n d·ªãch v·ª•", "")
            original_price = service.get("Gi√° g·ªëc", "")
            discount = service.get("Gi·∫£m gi√°", "")
            discounted_price = service.get("Gi√° khuy·∫øn m√£i", "")
            unit = service.get("ƒê∆°n v·ªã", "")
            category = service.get("Danh m·ª•c", "")
            
            if name:
                if is_vietnamese:
                    result += f"## {name}\n"
                    if category:
                        result += f"**Danh m·ª•c:** {category}\n"
                    if original_price:
                        result += f"**Gi√° g·ªëc:** {original_price}\n"
                    if discount and discount != "0%":
                        result += f"**Gi·∫£m gi√°:** {discount}\n"
                    if discounted_price and discounted_price != "":
                        result += f"**Gi√° khuy·∫øn m√£i:** {discounted_price}\n"
                    elif original_price:
                        result += f"**Gi√° hi·ªán t·∫°i:** {original_price}\n"
                    if unit:
                        result += f"**ƒê∆°n v·ªã:** {unit}\n"
                else:
                    result += f"## {name}\n"
                    if category:
                        result += f"**Category:** {category}\n"
                    if original_price:
                        result += f"**Original price:** {original_price}\n"
                    if discount and discount != "0%":
                        result += f"**Discount:** {discount}\n"
                    if discounted_price and discounted_price != "":
                        result += f"**Promotional price:** {discounted_price}\n"
                    elif original_price:
                        result += f"**Current price:** {original_price}\n"
                    if unit:
                        result += f"**Unit:** {unit}\n"
                
                result += "\n"
        
        # Th√™m ghi ch√∫ v·ªÅ ch√≠nh s√°ch gi√°
        if is_vietnamese:
            result += "*Xin l∆∞u √Ω r·∫±ng gi√° c√≥ th·ªÉ thay ƒë·ªïi d·ª±a tr√™n y√™u c·∫ßu c·ª• th·ªÉ v√† t√¨nh tr·∫°ng rƒÉng mi·ªáng c·ªßa t·ª´ng ng∆∞·ªùi. Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt nh·∫•t.*"
        else:
            result += "*Please note that prices may vary based on specific requirements and individual dental conditions. Please contact us for the most detailed consultation.*"
            
        return result
    
    def get_service_by_exact_name(self, service_name: str) -> List[Dict[str, Any]]:
        """T√¨m ki·∫øm d·ªãch v·ª• ch√≠nh x√°c theo t√™n"""
        service_name = service_name.lower().strip()
        results = []
        
        for category, services in self.price_data.get("services_by_category", {}).items():
            for service in services:
                if "T√™n d·ªãch v·ª•" in service and isinstance(service.get("T√™n d·ªãch v·ª•"), str):
                    if service.get("T√™n d·ªãch v·ª•", "").lower() == service_name:
                        service_copy = service.copy()
                        service_copy["Danh m·ª•c"] = category
                        results.append(service_copy)
        
        return results

    def format_budget_recommendations(self, budget: float, affordable_services: Dict[str, List[Dict[str, Any]]], is_vietnamese: bool = True) -> str:
        """ƒê·ªãnh d·∫°ng g·ª£i √Ω d·ªãch v·ª• d·ª±a tr√™n ng√¢n s√°ch"""
        if not affordable_services:
            if is_vietnamese:
                return f"üí∞ V·ªõi ng√¢n s√°ch {budget:,.0f} VND, hi·ªán t·∫°i ch√∫ng t√¥i kh√¥ng c√≥ d·ªãch v·ª• ph√π h·ª£p. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ c√°c l·ª±a ch·ªçn ph√π h·ª£p."
            else:
                return f"üí∞ With a budget of {budget:,.0f} VND, we currently don't have services that fit your budget. Please contact us directly for advice on suitable options."
        
        if is_vietnamese:
            result = f"üí∞ **G·ª¢I √ù D·ªäCH V·ª§ PH√ô H·ª¢P V·ªöI NG√ÇN S√ÅCH {budget:,.0f} VND:**\n\n"
        else:
            result = f"üí∞ **RECOMMENDED SERVICES FOR YOUR {budget:,.0f} VND BUDGET:**\n\n"
        
        for category, services in affordable_services.items():
            if is_vietnamese:
                result += f"## {category}\n"
            else:
                result += f"## {category}\n"
            
            # Gi·ªõi h·∫°n s·ªë d·ªãch v·ª• hi·ªÉn th·ªã m·ªói danh m·ª•c
            display_limit = 3
            for i, service in enumerate(services[:display_limit]):
                name = service.get("T√™n d·ªãch v·ª•", "")
                price = service.get("Gi√° khuy·∫øn m√£i", service.get("Gi√° g·ªëc", ""))
                
                if is_vietnamese:
                    result += f"- **{name}**: {price}\n"
                else:
                    result += f"- **{name}**: {price}\n"
            
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng d·ªãch v·ª• kh√°c n·∫øu c√≥
            remaining = len(services) - display_limit
            if remaining > 0:
                if is_vietnamese:
                    result += f"- *v√† {remaining} d·ªãch v·ª• kh√°c...*\n"
                else:
                    result += f"- *and {remaining} more services...*\n"
            
            result += "\n"
        
        # Th√™m th√¥ng tin v·ªÅ c√°c t√πy ch·ªçn thanh to√°n
        if is_vietnamese:
            result += "**B·∫°n c≈©ng c√≥ th·ªÉ xem x√©t c√°c t√πy ch·ªçn tr·∫£ g√≥p c·ªßa ch√∫ng t√¥i ƒë·ªÉ ti·∫øp c·∫≠n c√°c d·ªãch v·ª• cao c·∫•p h∆°n.**"
        else:
            result += "**You may also consider our installment payment options to access higher-tier services.**"
        
        return result

class FinancialProcessor:
    def __init__(self, financial_data_path: str):
        self.financial_data = self._load_financial_data(financial_data_path)
        
    def _load_financial_data(self, path: str) -> Dict[str, Any]:
        """T·∫£i d·ªØ li·ªáu t√†i ch√≠nh t·ª´ file JSON"""
        try:
            with open(path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except Exception as e:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t√†i ch√≠nh: {str(e)}")
            return {"payment_plans": {}, "special_promotions": {}, "seasonal_promotions": {}}
    
    def get_payment_plans(self, is_vietnamese: bool = True) -> str:
        """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ c√°c k·∫ø ho·∫°ch thanh to√°n"""
        payment_plans = self.financial_data.get("payment_plans", {})
        
        if is_vietnamese:
            result = "üí≥ **C√ÅC PH∆Ø∆†NG TH·ª®C THANH TO√ÅN & TR·∫¢ G√ìP:**\n\n"
        else:
            result = "üí≥ **PAYMENT & INSTALLMENT OPTIONS:**\n\n"
            
        for plan_id, plan in payment_plans.items():
            name = plan.get("name" if is_vietnamese else "name_en", "")
            description = plan.get("description" if is_vietnamese else "description_en", "")
            interest = plan.get("interest", "")
            min_cost = plan.get("min_treatment_cost", "")
            partners = plan.get("partners", [])
            
            result += f"### {name}\n"
            result += f"{description}\n"
            
            if interest:
                if is_vietnamese:
                    result += f"**L√£i su·∫•t:** {interest}\n"
                else:
                    result += f"**Interest:** {interest}\n"
                    
            if min_cost:
                if is_vietnamese:
                    result += f"**Chi ph√≠ ƒëi·ªÅu tr·ªã t·ªëi thi·ªÉu:** {min_cost}\n"
                else:
                    result += f"**Minimum treatment cost:** {min_cost}\n"
                    
            if partners:
                if is_vietnamese:
                    result += f"**ƒê·ªëi t√°c ng√¢n h√†ng:** {', '.join(partners)}\n"
                else:
                    result += f"**Banking partners:** {', '.join(partners)}\n"
                    
            result += "\n"
            
        return result
    
    def get_special_promotions(self, is_vietnamese: bool = True) -> str:
        """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒë·∫∑c bi·ªát"""
        special_promotions = self.financial_data.get("special_promotions", {})
        
        if is_vietnamese:
            result = "üéÅ **KHUY·∫æN M√ÉI D√ÄNH CHO NH√ìM ƒê·∫∂C BI·ªÜT:**\n\n"
        else:
            result = "üéÅ **SPECIAL GROUP PROMOTIONS:**\n\n"
            
        for promo_id, promo in special_promotions.items():
            name = promo.get("name" if is_vietnamese else "name_en", "")
            description = promo.get("description" if is_vietnamese else "description_en", "")
            discount = promo.get("discount" if is_vietnamese else "discount_en", "")
            conditions = promo.get("conditions" if is_vietnamese else "conditions_en", "")
            
            result += f"### {name}\n"
            result += f"{description}\n"
            
            if discount:
                if is_vietnamese:
                    result += f"**Gi·∫£m gi√°:** {discount}\n"
                else:
                    result += f"**Discount:** {discount}\n"
                    
            if conditions:
                if is_vietnamese:
                    result += f"**ƒêi·ªÅu ki·ªán √°p d·ª•ng:** {conditions}\n"
                else:
                    result += f"**Conditions:** {conditions}\n"
                    
            result += "\n"
            
        return result
    
    def get_current_seasonal_promotions(self, is_vietnamese: bool = True) -> str:
        """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i theo m√πa hi·ªán t·∫°i"""
        seasonal_promotions = self.financial_data.get("seasonal_promotions", {})
        
        # L·∫•y ng√†y hi·ªán t·∫°i
        from datetime import datetime
        now = datetime.now()
        current_month = now.month
        current_day = now.day
        
        # X√°c ƒë·ªãnh khuy·∫øn m√£i hi·ªán t·∫°i
        current_promos = []
        for promo_id, promo in seasonal_promotions.items():
            valid_period = promo.get("valid_period" if is_vietnamese else "valid_period_en", "")
            
            # Ph√¢n t√≠ch kho·∫£ng th·ªùi gian
            try:
                # ƒê·ªãnh d·∫°ng: "DD/MM - DD/MM h√†ng nƒÉm"
                period_parts = valid_period.split("-")
                start_part = period_parts[0].strip().split("/")
                end_part = period_parts[1].split("h√†ng nƒÉm")[0].strip().split("/")
                
                start_day = int(start_part[0])
                start_month = int(start_part[1])
                end_day = int(end_part[0])
                end_month = int(end_part[1])
                
                # Ki·ªÉm tra xem ng√†y hi·ªán t·∫°i c√≥ trong kho·∫£ng th·ªùi gian hay kh√¥ng
                if (start_month < end_month and 
                    ((current_month > start_month and current_month < end_month) or
                     (current_month == start_month and current_day >= start_day) or
                     (current_month == end_month and current_day <= end_day))):
                    current_promos.append(promo)
                elif (start_month > end_month and  # Tr∆∞·ªùng h·ª£p khuy·∫øn m√£i k√©o d√†i t·ª´ nƒÉm c≈© sang nƒÉm m·ªõi
                      ((current_month > start_month) or
                       (current_month < end_month) or
                       (current_month == start_month and current_day >= start_day) or
                       (current_month == end_month and current_day <= end_day))):
                    current_promos.append(promo)
                elif start_month == end_month and current_month == start_month:
                    if (start_day <= end_day and current_day >= start_day and current_day <= end_day) or \
                       (start_day > end_day and (current_day >= start_day or current_day <= end_day)):
                        current_promos.append(promo)
            except:
                # B·ªè qua n·∫øu ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá
                pass
        
        if not current_promos:
            # N·∫øu kh√¥ng c√≥ khuy·∫øn m√£i hi·ªán t·∫°i, l·∫•y khuy·∫øn m√£i s·∫Øp t·ªõi
            upcoming_promo = None
            min_months_away = 12
            
            for promo_id, promo in seasonal_promotions.items():
                valid_period = promo.get("valid_period" if is_vietnamese else "valid_period_en", "")
                
                # Ph√¢n t√≠ch kho·∫£ng th·ªùi gian
                try:
                    period_parts = valid_period.split("-")
                    start_part = period_parts[0].strip().split("/")
                    
                    start_day = int(start_part[0])
                    start_month = int(start_part[1])
                    
                    # T√≠nh s·ªë th√°ng ƒë·∫øn khuy·∫øn m√£i ti·∫øp theo
                    months_away = (start_month - current_month) % 12
                    
                    # N·∫øu c√πng th√°ng, so s√°nh ng√†y
                    if months_away == 0 and start_day <= current_day:
                        months_away = 12  # ƒê√£ qua, ƒë·ª£i ƒë·∫øn nƒÉm sau
                        
                    if months_away < min_months_away:
                        min_months_away = months_away
                        upcoming_promo = promo
                except:
                    # B·ªè qua n·∫øu ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá
                    pass
                
            if upcoming_promo:
                if is_vietnamese:
                    result = "üóìÔ∏è **CH∆Ø∆†NG TR√åNH KHUY·∫æN M√ÉI S·∫ÆP T·ªöI:**\n\n"
                else:
                    result = "üóìÔ∏è **UPCOMING PROMOTION:**\n\n"
                    
                name = upcoming_promo.get("name" if is_vietnamese else "name_en", "")
                description = upcoming_promo.get("description" if is_vietnamese else "description_en", "")
                discount = upcoming_promo.get("discount" if is_vietnamese else "discount_en", "")
                valid_period = upcoming_promo.get("valid_period" if is_vietnamese else "valid_period_en", "")
                
                result += f"### {name}\n"
                result += f"{description}\n"
                
                if discount:
                    if is_vietnamese:
                        result += f"**Gi·∫£m gi√°:** {discount}\n"
                    else:
                        result += f"**Discount:** {discount}\n"
                        
                if valid_period:
                    if is_vietnamese:
                        result += f"**Th·ªùi gian √°p d·ª•ng:** {valid_period}\n"
                    else:
                        result += f"**Valid period:** {valid_period}\n"
                        
                return result
            else:
                if is_vietnamese:
                    return "Hi·ªán kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o ƒëang di·ªÖn ra. Vui l√≤ng li√™n h·ªá ch√∫ng t√¥i ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ c√°c ∆∞u ƒë√£i hi·ªán c√≥."
                else:
                    return "There are currently no ongoing seasonal promotions. Please contact us for more details about available offers."
        else:
            if is_vietnamese:
                result = "üî• **CH∆Ø∆†NG TR√åNH KHUY·∫æN M√ÉI ƒêANG DI·ªÑN RA:**\n\n"
            else:
                result = "üî• **CURRENT PROMOTIONS:**\n\n"
                
            for promo in current_promos:
                name = promo.get("name" if is_vietnamese else "name_en", "")
                description = promo.get("description" if is_vietnamese else "description_en", "")
                discount = promo.get("discount" if is_vietnamese else "discount_en", "")
                valid_period = promo.get("valid_period" if is_vietnamese else "valid_period_en", "")
                
                result += f"### {name}\n"
                result += f"{description}\n"
                
                if discount:
                    if is_vietnamese:
                        result += f"**Gi·∫£m gi√°:** {discount}\n"
                    else:
                        result += f"**Discount:** {discount}\n"
                        
                if valid_period:
                    if is_vietnamese:
                        result += f"**Th·ªùi gian √°p d·ª•ng:** {valid_period}\n"
                    else:
                        result += f"**Valid period:** {valid_period}\n"
                        
                result += "\n"
                
            return result
    
    def get_all_seasonal_promotions(self, is_vietnamese: bool = True) -> str:
        """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ t·∫•t c·∫£ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i theo m√πa"""
        seasonal_promotions = self.financial_data.get("seasonal_promotions", {})
        
        if is_vietnamese:
            result = "üóìÔ∏è **L·ªäCH KHUY·∫æN M√ÉI THEO M√ôA:**\n\n"
        else:
            result = "üóìÔ∏è **SEASONAL PROMOTION CALENDAR:**\n\n"
            
        for promo_id, promo in seasonal_promotions.items():
            name = promo.get("name" if is_vietnamese else "name_en", "")
            description = promo.get("description" if is_vietnamese else "description_en", "")
            discount = promo.get("discount" if is_vietnamese else "discount_en", "")
            valid_period = promo.get("valid_period" if is_vietnamese else "valid_period_en", "")
            
            result += f"### {name}\n"
            result += f"{description}\n"
            
            if discount:
                if is_vietnamese:
                    result += f"**Gi·∫£m gi√°:** {discount}\n"
                else:
                    result += f"**Discount:** {discount}\n"
                    
            if valid_period:
                if is_vietnamese:
                    result += f"**Th·ªùi gian √°p d·ª•ng:** {valid_period}\n"
                else:
                    result += f"**Valid period:** {valid_period}\n"
                    
            result += "\n"
            
        return result

class DentalChatbot:
    def __init__(self, data_processor: DataProcessor):
        self.data_processor = data_processor
        self.conversation_history: List[Message] = []
        self.current_role = None
        
        # Try available models until one works
        self.model = None
        for model_name in GEMINI_MODELS:
            try:
                print(f"Trying to initialize model: {model_name}")
                self.model = genai.GenerativeModel(model_name)
                # Test the model with a simple prompt
                test_response = self.model.generate_content("Hello")
                print(f"Successfully initialized model: {model_name}")
                break
            except Exception as e:
                print(f"Failed to initialize model {model_name}: {str(e)}")
                continue
                
        if self.model is None:
            print("WARNING: No Gemini models are available. Using fallback response generation.")
        
        # Display welcome message
        self.display_welcome_message()
    
    def display_welcome_message(self):
        """Display a welcome message at the start of the conversation"""
        welcome_msg = WELCOME_MESSAGES[0]  # Default to Vietnamese
        print(f"\n[Tr·ª£ l√Ω] {welcome_msg}")
    
    def _is_vietnamese(self, text):
        """Determine if a text is primarily in Vietnamese"""
        # Vietnamese specific characters
        vn_chars = "√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë"
        vn_chars += vn_chars.upper()
        
        # Count Vietnamese specific characters
        vn_char_count = sum(1 for c in text if c in vn_chars)
        
        # Check for common Vietnamese words
        vn_words = ["t√¥i", "b·∫°n", "c·ªßa", "v√†", "l√†", "c√≥", "kh√¥ng", "ƒë∆∞·ª£c", "trong", "ƒë√≥", "n√†y"]
        word_count = sum(1 for word in vn_words if word in text.lower())
        
        # If Vietnamese characters or words are present, consider it Vietnamese
        return vn_char_count > 0 or word_count > 0
    
    def _append_booking_and_learn_more(self, response: str, sources: List[Dict] = None, is_vietnamese: bool = True) -> str:
        """Append booking information and learn more links to the response"""
        # Add "Learn more" section if sources are provided
        if sources and len(sources) > 0:
            learn_more_links = []
            for source in sources:
                if 'url' in source:
                    title = source.get('title', 'B√†i vi·∫øt li√™n quan')
                    url = source['url']
                    learn_more_links.append(f"[{title}]({url})")
            
            if learn_more_links:
                if is_vietnamese:
                    response += "\n\nüîç **T√¨m hi·ªÉu th√™m:**\n" + "\n".join(learn_more_links)
                else:
                    response += "\n\nüîç **Learn more:**\n" + "\n".join(learn_more_links)
        
        # Add booking information
        if is_vietnamese:
            response += BOOKING_MESSAGE_VI
        else:
            response += BOOKING_MESSAGE_EN
        
        return response
        
    def _determine_role(self, query: str) -> AgentRole:
        """Determine which agent should handle the query"""
        # Dental keywords in English and Vietnamese
        dental_keywords = [
            # English
            "tooth", "teeth", "dental", "dentist", "cavity", "gum", 
            "floss", "filling", "crown", "root canal", "braces", "mouth",
            "ache", "pain", "sensitivity", "hygiene", "brushing", "invisalign",
            # Vietnamese
            "rƒÉng", "nha khoa", "nha sƒ©", "s√¢u rƒÉng", "l·ª£i", "n∆∞·ªõu",
            "ch·ªâ nha khoa", "tr√°m rƒÉng", "m√£o rƒÉng", "ch·ªØa t·ªßy", "ni·ªÅng rƒÉng", "mi·ªáng",
            "ƒëau", "ƒëau nh·ª©c", "√™ bu·ªët", "v·ªá sinh", "ƒë√°nh rƒÉng", "invisalign"
        ]
                          
        # Service keywords in English and Vietnamese
        service_keywords = [
            # English
            "appointment", "schedule", "book", "price", "cost", 
            "insurance", "doctor", "available", "time", "location",
            "office", "hours", "payment", "contact", "address",
            # Vietnamese
            "cu·ªôc h·∫πn", "l·ªãch h·∫πn", "ƒë·∫∑t l·ªãch", "gi√°", "chi ph√≠", 
            "b·∫£o hi·ªÉm", "b√°c sƒ©", "l·ªãch tr·ªëng", "th·ªùi gian", "ƒë·ªãa ƒëi·ªÉm",
            "vƒÉn ph√≤ng", "gi·ªù l√†m vi·ªác", "thanh to√°n", "li√™n h·ªá", "ƒë·ªãa ch·ªâ"
        ]
        
        # Check for explicit doctor inquiry in both languages
        doctor_patterns = ["how many doctors", "b√°c sƒ©", "doctor", "s·ªë l∆∞·ª£ng b√°c sƒ©", "danh s√°ch b√°c sƒ©", 
                          "mi·ªÅn nam", "mi·ªÅn b·∫Øc", "mi·ªÅn trung", "ph√≠a nam", "ph√≠a b·∫Øc", "ph√≠a trung"]
        if any(pattern in query.lower() for pattern in doctor_patterns):
            return AgentRole.CUSTOMER_SERVICE
            
        dental_score = sum(1 for word in dental_keywords if word.lower() in query.lower())
        service_score = sum(1 for word in service_keywords if word.lower() in query.lower())
        
        return AgentRole.DENTAL_CONSULTANT if dental_score >= service_score else AgentRole.CUSTOMER_SERVICE
    
    def _identify_doctor_query_type(self, query: str) -> Tuple[str, str]:
        """Identify the type of doctor query (region, education, certificate)"""
        query_lower = query.lower()
        
        # Check for region queries
        region_patterns = ["mi·ªÅn nam", "mi·ªÅn b·∫Øc", "mi·ªÅn trung", "ph√≠a nam", "ph√≠a b·∫Øc", "ph√≠a trung"]
        for pattern in region_patterns:
            if pattern in query_lower:
                return "region", pattern
        
        # Check for education queries
        education_patterns = ["ƒë·∫°i h·ªçc", "university", "t·ªët nghi·ªáp", "graduate", "h·ªçc t·∫°i", "studied at", "ƒëh"]
        for pattern in education_patterns:
            if pattern in query_lower:
                # Extract the education institution
                words_after = query_lower.split(pattern)[1].strip()
                if words_after:
                    # Get a few words after the pattern
                    education_query = words_after.split()[0:3]
                    return "education", " ".join(education_query)
        
        # Check for certificate queries
        certificate_patterns = ["ch·ª©ng ch·ªâ", "certificate", "chuy√™n v·ªÅ", "specialist", "chuy√™n ng√†nh"]
        for pattern in certificate_patterns:
            if pattern in query_lower:
                # Extract the certificate type
                words_after = query_lower.split(pattern)[1].strip()
                if words_after:
                    # Get a few words after the pattern
                    certificate_query = words_after.split()[0:3]
                    return "certificate", " ".join(certificate_query)
        
        # Default: general doctor query
        return "general", ""
    
    def _format_doctor_list(self, doctors: List[Dict[str, Any]], is_vietnamese: bool = True, detailed_limit: int = 3) -> str:
        """Format a list of doctors with detailed information for the first few"""
        if not doctors:
            if is_vietnamese:
                return "‚ùå Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
            else:
                return "‚ùå No doctors found matching your criteria."
        
        if is_vietnamese:
            result = f"ü©∫ **ƒê√£ t√¨m th·∫•y {len(doctors)} b√°c sƒ©:**\n\n"
        else:
            result = f"ü©∫ **Found {len(doctors)} doctors:**\n\n"
        
        # Add detailed information for the first few doctors
        for i, doctor in enumerate(doctors[:detailed_limit]):
            name = doctor.get('name', 'Kh√¥ng c√≥ t√™n')
            area = doctor.get('area', 'Kh√¥ng c√≥ th√¥ng tin khu v·ª±c')
            education = doctor.get('education', 'Kh√¥ng c√≥ th√¥ng tin h·ªçc v·∫•n')
            certificate = doctor.get('certificate', 'Kh√¥ng c√≥ th√¥ng tin ch·ª©ng ch·ªâ')
            
            result += f"**{i+1}. {name}** üë®‚Äç‚öïÔ∏è\n"
            result += f"   ‚Ä¢ **{'Khu v·ª±c' if is_vietnamese else 'Area'}:** {area}\n"
            result += f"   ‚Ä¢ **{'H·ªçc v·∫•n' if is_vietnamese else 'Education'}:** {education}\n"
            result += f"   ‚Ä¢ **{'Ch·ª©ng ch·ªâ' if is_vietnamese else 'Certificates'}:** {certificate}\n\n"
        
        # List remaining doctors by name only
        if len(doctors) > detailed_limit:
            if is_vietnamese:
                result += "**C√°c b√°c sƒ© kh√°c:** "
            else:
                result += "**Other doctors:** "
                
            other_names = [doctor.get('name', 'Kh√¥ng c√≥ t√™n') for doctor in doctors[detailed_limit:]]
            result += ", ".join(other_names)
        
        return result
    
    def _generate_response_with_template(self, prompt_type, query):
        """Fallback method for generating responses without Gemini API"""
        is_vietnamese = self._is_vietnamese(query)
        
        if prompt_type == "dental":
            if is_vietnamese:
                response = f"ü¶∑ L√† chuy√™n vi√™n t∆∞ v·∫•n nha khoa t·∫°i PrimeCare, t√¥i khuy√™n b·∫°n n√™n g·∫∑p m·ªôt trong c√°c chuy√™n gia c·ªßa ch√∫ng t√¥i v·ªÅ v·∫•n ƒë·ªÅ '{query}'. C√°c v·∫•n ƒë·ªÅ rƒÉng mi·ªáng c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω k·ªãp th·ªùi ƒë·ªÉ tr√°nh bi·∫øn ch·ª©ng. B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch h·∫πn v·ªõi m·ªôt trong c√°c nha sƒ© c·ªßa ch√∫ng t√¥i kh√¥ng?"
            else:
                response = f"ü¶∑ As a dental consultant at PrimeCare, I recommend seeing one of our specialists about your '{query}' concern. Dental issues should be addressed promptly to prevent complications. Would you like to schedule an appointment with one of our dentists?"
        else:  # customer service
            if "price" in query.lower() or "cost" in query.lower() or "gi√°" in query.lower() or "chi ph√≠" in query.lower():
                if is_vietnamese:
                    response = f"üí∞ T·∫°i PrimeCare, chi ph√≠ cho d·ªãch v·ª• {query} th∆∞·ªùng t·ª´ 300.000 ƒë·∫øn 800.000 VND t√πy thu·ªôc v√†o m·ª©c ƒë·ªô ph·ª©c t·∫°p. Ch√∫ng t√¥i s·∫Ω cung c·∫•p chi ph√≠ c·ª• th·ªÉ h∆°n trong bu·ªïi t∆∞ v·∫•n. B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch h·∫πn kh√¥ng?"
                else:
                    response = f"üí∞ At PrimeCare, our {query} procedures typically range from 300,000 to 800,000 VND depending on complexity. We'd be happy to provide a more specific estimate during a consultation. Would you like to schedule one?"
            elif "doctor" in query.lower() or "b√°c sƒ©" in query.lower():
                if is_vietnamese:
                    response = f"üë®‚Äç‚öïÔ∏è PrimeCare c√≥ nhi·ªÅu chuy√™n gia nha khoa gi√†u kinh nghi·ªám chuy√™n v·ªÅ c√°c lƒ©nh v·ª±c kh√°c nhau c·ªßa nha khoa. C√°c b√°c sƒ© c·ªßa ch√∫ng t√¥i ƒë·ªÅu ƒë∆∞·ª£c ƒë√†o t·∫°o chuy√™n s√¢u v√† c√≥ nhi·ªÅu ch·ª©ng ch·ªâ chuy√™n m√¥n. B·∫°n c√≥ mu·ªën bi·∫øt th√¥ng tin v·ªÅ b√°c sƒ© c·ª• th·ªÉ ho·∫∑c chuy√™n khoa nha khoa n√†o kh√¥ng?"
                else:
                    response = f"üë®‚Äç‚öïÔ∏è PrimeCare has multiple experienced dental professionals specializing in various areas of dentistry. Our doctors have extensive training and certifications. Would you like information about a specific doctor or dental specialty?"
            else:
                if is_vietnamese:
                    response = f"‚ÑπÔ∏è C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ '{query}'. Ph√≤ng kh√°m Nha khoa PrimeCare m·ªü c·ª≠a t·ª´ th·ª© Hai ƒë·∫øn th·ª© S√°u (8:00-20:00), th·ª© B·∫£y (8:00-18:00) v√† Ch·ªß nh·∫≠t (8:00-17:00). B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch h·∫πn ho·∫∑c c√≥ c√¢u h·ªèi n√†o kh√°c kh√¥ng?"
                else:
                    response = f"‚ÑπÔ∏è Thank you for your inquiry about '{query}'. PrimeCare Dental Clinic is open Monday-Friday 8AM-8PM, Saturday 8AM-6PM, and Sunday 8AM-5PM. Would you like to schedule an appointment or do you have other questions?"
        
        return self._append_booking_and_learn_more(response, None, is_vietnamese)
    
    def _generate_dental_response(self, query: str) -> str:
        """Generate response as dental consultant"""
        # Detect language
        is_vietnamese = self._is_vietnamese(query)
        
        # Retrieve relevant dental information
        results = self.data_processor.search_dental_data(query)
        
        # Format context from results
        context_items = []
        for result in results:
            title = result.get('title', 'Dental Information')
            
            # Process sections to extract information
            sections = result.get('sections', [])
            section_texts = []
            for section in sections:
                heading = section.get('heading', '')
                content = section.get('content', '')
                section_texts.append(f"SECTION: {heading}\n{content}")
            
            article_content = "\n\n".join(section_texts)
            context_items.append(f"ARTICLE: {title}\n{article_content}")
            
        context = "\n\n".join(context_items)
        
        # Create prompt for Gemini
        if is_vietnamese:
            prompt = f"""
            B·∫°n l√† m·ªôt chuy√™n vi√™n t∆∞ v·∫•n nha khoa c√≥ ki·∫øn th·ª©c chuy√™n s√¢u t·∫°i Ph√≤ng kh√°m Nha khoa PrimeCare, ƒëang n√≥i chuy·ªán v·ªõi m·ªôt b·ªánh nh√¢n b·∫±ng ti·∫øng Vi·ªát.
            S·ª≠ d·ª•ng th√¥ng tin nha khoa sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
            H√£y n√≥i chuy·ªán th√¢n thi·ªán, h·ªØu √≠ch v√† ch√≠nh x√°c. Th√™m emoji ph√π h·ª£p ƒë·ªÉ l√†m cho c√¢u tr·∫£ l·ªùi sinh ƒë·ªông h∆°n.
            N·∫øu th√¥ng tin kh√¥ng ch·ª©a c√¢u tr·∫£ l·ªùi r√µ r√†ng, h√£y cung c·∫•p l·ªùi khuy√™n nha khoa chung li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ nh∆∞ng n√≥i r√µ r·∫±ng b·∫°n ƒëang ƒë∆∞a ra th√¥ng tin chung.
            
            TH√îNG TIN NHA KHOA:
            {context}
            
            C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG: {query}
            
            Vui l√≤ng cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, d·ªÖ hi·ªÉu v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán nh∆∞ m·ªôt chuy√™n vi√™n t∆∞ v·∫•n nha khoa t·∫°i PrimeCare.
            S·ª≠ d·ª•ng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi v√† th√™m emoji ph√π h·ª£p:
            """
        else:
            prompt = f"""
            You are a knowledgeable dental consultant at PrimeCare Dental Clinic speaking with a patient. 
            Use the following dental information to answer the user's question.
            Be conversational, helpful, and accurate. Add appropriate emojis to make your answer more engaging.
            If the information doesn't contain a clear answer, provide general dental advice related to the topic but make it clear you're giving general information.
            
            DENTAL INFORMATION:
            {context}
            
            USER QUESTION: {query}
            
            Please provide a helpful, conversational response as a dental consultant at PrimeCare.
            Use markdown formatting for your answer and include appropriate emojis:
            """
        
        # Try to use Gemini API
        if self.model:
            try:
                response = self.model.generate_content(prompt)
                response_text = response.text
                # Add emoji if none present
                if not any(char in response_text for char in "ü¶∑üòäüë®‚Äç‚öïÔ∏èü©∫üîçüíäüíâ"):
                    response_text = "ü¶∑ " + response_text
                return self._append_booking_and_learn_more(response_text, results, is_vietnamese)
            except Exception as e:
                print(f"Error generating response with Gemini: {str(e)}")
                print("Using fallback response generation")
                
        # Fallback to template-based response
        return self._generate_response_with_template("dental", query)
    
    def _generate_service_response(self, query: str) -> str:
        """Generate response as customer service consultant"""
        # Detect language
        is_vietnamese = self._is_vietnamese(query)
        
        # Check if it's a specific doctor query type
        query_type, query_value = self._identify_doctor_query_type(query)
        
        if query_type == "region" and query_value:
            # Handle region-specific doctor query
            doctors = self.data_processor.get_doctors_by_region(query_value)
            doctor_list = self._format_doctor_list(doctors, is_vietnamese)
            
            if is_vietnamese:
                intro = f"üë®‚Äç‚öïÔ∏è D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c b√°c sƒ© ·ªü {query_value} c·ªßa Nha khoa PrimeCare:\n\n"
            else:
                intro = f"üë®‚Äç‚öïÔ∏è Here are the doctors in the {query_value} region at PrimeCare Dental Clinic:\n\n"
                
            return self._append_booking_and_learn_more(intro + doctor_list, None, is_vietnamese)
            
        elif query_type == "education" and query_value:
            # Handle education-specific doctor query
            doctors = self.data_processor.get_doctors_by_education(query_value)
            doctor_list = self._format_doctor_list(doctors, is_vietnamese)
            
            if is_vietnamese:
                intro = f"üë®‚Äç‚öïÔ∏è D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c b√°c sƒ© c√≥ li√™n quan ƒë·∫øn '{query_value}' t·∫°i Nha khoa PrimeCare:\n\n"
            else:
                intro = f"üë®‚Äç‚öïÔ∏è Here are the doctors associated with '{query_value}' at PrimeCare Dental Clinic:\n\n"
                
            return self._append_booking_and_learn_more(intro + doctor_list, None, is_vietnamese)
            
        elif query_type == "certificate" and query_value:
            # Handle certificate-specific doctor query
            doctors = self.data_processor.get_doctors_by_certificate(query_value)
            doctor_list = self._format_doctor_list(doctors, is_vietnamese)
            
            if is_vietnamese:
                intro = f"üë®‚Äç‚öïÔ∏è D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c b√°c sƒ© c√≥ ch·ª©ng ch·ªâ li√™n quan ƒë·∫øn '{query_value}' t·∫°i Nha khoa PrimeCare:\n\n"
            else:
                intro = f"üë®‚Äç‚öïÔ∏è Here are the doctors with certificates related to '{query_value}' at PrimeCare Dental Clinic:\n\n"
                
            return self._append_booking_and_learn_more(intro + doctor_list, None, is_vietnamese)
        
        # Ki·ªÉm tra n·∫øu l√† truy v·∫•n v·ªÅ ng√¢n s√°ch
        budget_match = re.search(r'(\d{1,3}([,.]\d{3})*([,.]\d+)?)(\s*)(tri·ªáu|tr|ngh√¨n|ng√†n|k|ƒë·ªìng|vnd|ƒë)', query.lower())
        if budget_match:
            try:
                # X·ª≠ l√Ω chu·ªói s·ªë th√†nh s·ªë nguy√™n
                budget_str = budget_match.group(1).replace('.', '').replace(',', '')
                budget = float(budget_str)
                
                # ƒêi·ªÅu ch·ªânh d·ª±a tr√™n ƒë∆°n v·ªã
                unit = budget_match.group(5).lower()
                if unit in ['tri·ªáu', 'tr']:
                    budget *= 1000000
                elif unit in ['ngh√¨n', 'ng√†n', 'k']:
                    budget *= 1000
                
                # L·∫•y g·ª£i √Ω d·ªãch v·ª• ph√π h·ª£p v·ªõi ng√¢n s√°ch
                budget_recommendations = self.data_processor.get_affordable_services(budget, is_vietnamese)
                
                # Th√™m th√¥ng tin v·ªÅ c√°c k·∫ø ho·∫°ch thanh to√°n
                if budget > 5000000:  # Cho c√°c d·ªãch v·ª• c√≥ gi√° tr·ªã cao
                    payment_plans = self.data_processor.get_payment_plans(is_vietnamese)
                    budget_recommendations += "\n\n" + payment_plans
                    
                return self._append_booking_and_learn_more(budget_recommendations, None, is_vietnamese)
            except Exception as e:
                print(f"Error processing budget query: {str(e)}")
        
        # Ki·ªÉm tra n·∫øu l√† truy v·∫•n v·ªÅ k·∫ø ho·∫°ch thanh to√°n/tr·∫£ g√≥p
        if any(word in query.lower() for word in 
            ["payment plan", "installment", "credit", "finance", "loan", 
            "tr·∫£ g√≥p", "g√≥p", "vay", "thanh to√°n", "t√≠n d·ª•ng"]):
            
            payment_plans = self.data_processor.get_payment_plans(is_vietnamese)
            return self._append_booking_and_learn_more(payment_plans, None, is_vietnamese)
        
        # Ki·ªÉm tra n·∫øu l√† truy v·∫•n v·ªÅ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒë·∫∑c bi·ªát
        if any(word in query.lower() for word in 
            ["student discount", "special offer", "discount", "offer", "promotion", 
            "sinh vi√™n", "khuy·∫øn m√£i", "gi·∫£m gi√°", "∆∞u ƒë√£i", "ƒë·∫∑c bi·ªát", "cao tu·ªïi", "khuy·∫øt t·∫≠t"]):
            
            special_promo = self.data_processor.get_special_promotions(is_vietnamese)
            return self._append_booking_and_learn_more(special_promo, None, is_vietnamese)
        
        # Ki·ªÉm tra n·∫øu l√† truy v·∫•n v·ªÅ khuy·∫øn m√£i theo m√πa
        if any(word in query.lower() for word in 
            ["seasonal", "holiday", "new year", "christmas", "event", 
            "theo m√πa", "ng√†y l·ªÖ", "t·∫øt", "nƒÉm m·ªõi", "l·ªÖ h·ªôi", "s·ª± ki·ªán"]):
            
            # L·∫•y khuy·∫øn m√£i ƒëang di·ªÖn ra
            current_promos = self.data_processor.get_current_promotions(is_vietnamese)
            
            # N·∫øu c·ª• th·ªÉ h∆°n v·ªÅ t·∫•t c·∫£ c√°c khuy·∫øn m√£i theo m√πa
            if any(word in query.lower() for word in ["all", "list", "upcoming", "t·∫•t c·∫£", "danh s√°ch", "s·∫Øp t·ªõi"]):
                all_promos = self.data_processor.get_all_promotions(is_vietnamese)
                if is_vietnamese:
                    return self._append_booking_and_learn_more(f"{current_promos}\n\n## TH√îNG TIN T·∫§T C·∫¢ KHUY·∫æN M√ÉI THEO M√ôA\n\n{all_promos}", None, is_vietnamese)
                else:
                    return self._append_booking_and_learn_more(f"{current_promos}\n\n## ALL SEASONAL PROMOTIONS\n\n{all_promos}", None, is_vietnamese)
            
            return self._append_booking_and_learn_more(current_promos, None, is_vietnamese)
        
        # Check for specific doctor count question
        if any(pattern in query.lower() for pattern in ["how many doctors", "s·ªë l∆∞·ª£ng b√°c sƒ©", "c√≥ bao nhi√™u b√°c sƒ©"]):
            doctor_count = self.data_processor.get_doctor_count()
            doctor_names = self.data_processor.get_doctor_names()
            names_list = ", ".join(doctor_names[:5])
            
            if is_vietnamese:
                prompt = f"""
                B·∫°n l√† m·ªôt chuy√™n vi√™n t∆∞ v·∫•n d·ªãch v·ª• kh√°ch h√†ng t·∫°i Ph√≤ng kh√°m Nha khoa PrimeCare. Ng∆∞·ªùi d√πng ƒë√£ h·ªèi v·ªÅ s·ªë l∆∞·ª£ng b√°c sƒ©.
                
                Ph√≤ng kh√°m Nha khoa PrimeCare c√≥ {doctor_count} b√°c sƒ©, bao g·ªìm {names_list} v√† nh·ªØng ng∆∞·ªùi kh√°c.
                
                C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG: {query}
                
                Vui l√≤ng cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát v·ªõi t∆∞ c√°ch l√† chuy√™n vi√™n t∆∞ v·∫•n d·ªãch v·ª• kh√°ch h√†ng t·∫°i PrimeCare.
                S·ª≠ d·ª•ng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi v√† th√™m emoji ph√π h·ª£p:
                """
            else:
                prompt = f"""
                You are a helpful customer service consultant for PrimeCare Dental Clinic. A user has asked about the number of doctors.
                
                We have {doctor_count} doctors at PrimeCare Dental Clinic, including {names_list} and others.
                
                USER QUESTION: {query}
                
                Please provide a helpful, conversational response as a customer service consultant at PrimeCare, telling them about our doctors.
                Use markdown formatting for your answer and include appropriate emojis:
                """
            
            if self.model:
                try:
                    response = self.model.generate_content(prompt)
                    response_text = response.text
                    # Add emoji if none present
                    if not any(char in response_text for char in "üë®‚Äç‚öïÔ∏èü©∫üîçüíäüíâ"):
                        response_text = "üë®‚Äç‚öïÔ∏è " + response_text
                    return self._append_booking_and_learn_more(response_text, None, is_vietnamese)
                except Exception as e:
                    print(f"Error generating response with Gemini: {str(e)}")
                    if is_vietnamese:
                        return self._append_booking_and_learn_more(f"üë®‚Äç‚öïÔ∏è Ph√≤ng kh√°m Nha khoa PrimeCare c√≥ {doctor_count} b√°c sƒ© gi√†u kinh nghi·ªám, bao g·ªìm {names_list} v√† nhi·ªÅu ng∆∞·ªùi kh√°c. T·∫•t c·∫£ c√°c b√°c sƒ© c·ªßa ch√∫ng t√¥i ƒë·ªÅu c√≥ tr√¨nh ƒë·ªô cao v·ªõi nhi·ªÅu nƒÉm ƒë√†o t·∫°o chuy√™n s√¢u trong c√°c chuy√™n khoa c·ªßa h·ªç. B·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ b√°c sƒ© c·ª• th·ªÉ n√†o kh√¥ng?", None, is_vietnamese)
                    else:
                        return self._append_booking_and_learn_more(f"üë®‚Äç‚öïÔ∏è PrimeCare Dental Clinic has {doctor_count} experienced doctors, including {names_list} and others. All our doctors are highly qualified with extensive training in their specialties. Would you like to know more about any specific doctor?", None, is_vietnamese)
            else:
                if is_vietnamese:
                    return self._append_booking_and_learn_more(f"üë®‚Äç‚öïÔ∏è Ph√≤ng kh√°m Nha khoa PrimeCare c√≥ {doctor_count} b√°c sƒ© gi√†u kinh nghi·ªám, bao g·ªìm {names_list} v√† nhi·ªÅu ng∆∞·ªùi kh√°c. T·∫•t c·∫£ c√°c b√°c sƒ© c·ªßa ch√∫ng t√¥i ƒë·ªÅu c√≥ tr√¨nh ƒë·ªô cao v·ªõi nhi·ªÅu nƒÉm ƒë√†o t·∫°o chuy√™n s√¢u trong c√°c chuy√™n khoa c·ªßa h·ªç. B·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ b√°c sƒ© c·ª• th·ªÉ n√†o kh√¥ng?", None, is_vietnamese)
                else:
                    return self._append_booking_and_learn_more(f"üë®‚Äç‚öïÔ∏è PrimeCare Dental Clinic has {doctor_count} experienced doctors, including {names_list} and others. All our doctors are highly qualified with extensive training in their specialties. Would you like to know more about any specific doctor?", None, is_vietnamese)
            
        # Retrieve relevant doctor information
        results = self.data_processor.search_doctor_data(query)
        
        # Check if query is about pricing or appointments
        is_price_query = any(word in query.lower() for word in 
                        ["price", "cost", "fee", "expensive", "cheap", "afford", "payment",
                            "gi√°", "chi ph√≠", "ph√≠", "ƒë·∫Øt", "r·∫ª", "chi tr·∫£", "thanh to√°n"])
        is_appointment_query = any(word in query.lower() for word in 
                                ["appointment", "schedule", "book", "available", "time", "when", "visit",
                                "l·ªãch h·∫πn", "ƒë·∫∑t l·ªãch", "ƒë·∫∑t h·∫πn", "s·∫µn s√†ng", "th·ªùi gian", "khi n√†o", "thƒÉm kh√°m"])
        
        # Format context from results
        doctor_info = []
        for result in results:
            name = result.get('name', 'Unknown')
            area = result.get('area', 'Unknown Area')
            education = result.get('education', 'Education information not available')
            certificate = result.get('certificate', 'No certificates listed')
            
            if is_vietnamese:
                doctor_info.append(f"B√°c sƒ©: {name}\nKhu v·ª±c: {area}\nH·ªçc v·∫•n: {education}\nCh·ª©ng ch·ªâ: {certificate}")
            else:
                doctor_info.append(f"Doctor: {name}\nArea: {area}\nEducation: {education}\nCertificates: {certificate}")
            
        context = "\n\n".join(doctor_info)
        
        # Look for specific service in the query if it's a price query
        if is_price_query:
            service_keywords = [
                # Orthodontics
                "ni·ªÅng rƒÉng", "m·∫Øc c√†i", "braces", "orthodontic", "invisalign",
                # Implants
                "implant", "tr·ªìng rƒÉng", "c·∫•y gh√©p", 
                # General dentistry
                "nh·ªï rƒÉng", "extraction", "tr√°m rƒÉng", "filling", "t·∫©y tr·∫Øng", "whitening",
                "c·∫°o v√¥i", "scaling", "v·ªá sinh", "cleaning", "kh√°m", "check-up",
                # Restorative
                "m√£o rƒÉng", "crown", "c·∫ßu rƒÉng", "bridge", "veneer",
                # Children
                "tr·∫ª em", "children", "nhi", "pediatric"
            ]
            
            # Check if query contains specific service keywords
            specific_service_query = False
            for keyword in service_keywords:
                if keyword in query.lower():
                    specific_service_query = True
                    # L·∫•y th√¥ng tin gi√° t·ª´ processor thay v√¨ d√πng d·ªØ li·ªáu c·ª©ng
                    pricing_info = self.data_processor.get_price_info(keyword, is_vietnamese)
                    break
            
            # N·∫øu kh√¥ng t√¨m th·∫•y d·ªãch v·ª• c·ª• th·ªÉ, cung c·∫•p t·ªïng quan v·ªÅ gi√°
            if not specific_service_query:
                if is_vietnamese:
                    pricing_info = "üìä **B·∫¢NG GI√Å T·ªîNG QUAN:**\n\n"
                    for category in self.data_processor.price_processor.categories:
                        price_range = self.data_processor.price_processor.price_ranges.get(category, (0, 0))
                        pricing_info += f"‚Ä¢ **{category}**: {price_range[0]:,.0f}ƒë - {price_range[1]:,.0f}ƒë\n"
                    pricing_info += "\n*Vui l√≤ng li√™n h·ªá ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ gi√° c·ªßa t·ª´ng d·ªãch v·ª• c·ª• th·ªÉ.*"
                else:
                    pricing_info = "üìä **PRICE OVERVIEW:**\n\n"
                    for category in self.data_processor.price_processor.categories:
                        price_range = self.data_processor.price_processor.price_ranges.get(category, (0, 0))
                        pricing_info += f"‚Ä¢ **{category}**: {price_range[0]:,.0f} VND - {price_range[1]:,.0f} VND\n"
                    pricing_info += "\n*Please contact us for detailed pricing on specific services.*"
        else:
            pricing_info = ""
        
        # Add appointment information if requested
        if is_vietnamese:
            appointment_info = """
            üïí **GI·ªú L√ÄM VI·ªÜC:**
            ‚Ä¢ Th·ª© Hai - Th·ª© S√°u: 8:00 - 20:00
            ‚Ä¢ Th·ª© B·∫£y: 8:00 - 18:00
            ‚Ä¢ Ch·ªß Nh·∫≠t: 8:00 - 17:00
            
            Ch√∫ng t√¥i th∆∞·ªùng c√≥ l·ªãch tr·ªëng trong v√≤ng 1-2 ng√†y cho c√°c cu·ªôc h·∫πn th√¥ng th∆∞·ªùng.
            C√°c cu·ªôc h·∫πn kh·∫©n c·∫•p th∆∞·ªùng c√≥ th·ªÉ ƒë∆∞·ª£c s·∫Øp x·∫øp trong c√πng ng√†y.
            """
        else:
            appointment_info = """
            üïí **OFFICE HOURS:**
            ‚Ä¢ Monday-Friday: 8:00 AM - 8:00 PM
            ‚Ä¢ Saturday: 8:00 AM - 6:00 PM
            ‚Ä¢ Sunday: 8:00 AM - 5:00 PM
            
            We typically have availability within 1-2 days for regular appointments.
            Emergency appointments can often be accommodated on the same day.
            """
        
        # Create prompt for Gemini
        if is_vietnamese:
            prompt = f"""
            B·∫°n l√† m·ªôt chuy√™n vi√™n t∆∞ v·∫•n d·ªãch v·ª• kh√°ch h√†ng t·∫°i Ph√≤ng kh√°m Nha khoa PrimeCare. H√£y s·ª≠ d·ª•ng th√¥ng tin sau ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, h·ªØu √≠ch v√† d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát.
            
            TH√îNG TIN B√ÅC Sƒ®:
            {context}
            
            {pricing_info if is_price_query else ""}
            {appointment_info if is_appointment_query else ""}
            
            C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG: {query}
            
            Vui l√≤ng cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, d·ªÖ hi·ªÉu v·ªõi t∆∞ c√°ch l√† chuy√™n vi√™n t∆∞ v·∫•n d·ªãch v·ª• kh√°ch h√†ng t·∫°i PrimeCare.
            S·ª≠ d·ª•ng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi v√† th√™m emoji ph√π h·ª£p:
            """
        else:
            prompt = f"""
            You are a helpful customer service consultant for PrimeCare Dental Clinic. Use the following information to answer the user's question.
            Be conversational, friendly, and helpful.
            
            DOCTOR INFORMATION:
            {context}
            
            {pricing_info if is_price_query else ""}
            {appointment_info if is_appointment_query else ""}
            
            USER QUESTION: {query}
            
            Please provide a helpful, conversational response as a customer service consultant at PrimeCare.
            Use markdown formatting for your answer and include appropriate emojis:
            """
        
        # Try to use Gemini API
        if self.model:
            try:
                response = self.model.generate_content(prompt)
                response_text = response.text
                # Add emoji if none present
                if not any(char in response_text for char in "üí∞üïíüë®‚Äç‚öïÔ∏èü©∫üîçüíäüíâ"):
                    if is_price_query:
                        response_text = "üí∞ " + response_text
                    elif is_appointment_query:
                        response_text = "üïí " + response_text
                    else:
                        response_text = "üë®‚Äç‚öïÔ∏è " + response_text
                return self._append_booking_and_learn_more(response_text, None, is_vietnamese)
            except Exception as e:
                print(f"Error generating response with Gemini: {str(e)}")
                print("Using fallback response generation")
                
        # Fallback to template-based response
        if is_price_query:
            # Extract any service names from the query for more specific response
            service_name = None
            for keyword in service_keywords:
                if keyword in query.lower():
                    service_name = keyword
                    break
            
            if service_name:
                services = self.data_processor.price_processor.search_service(service_name)
                if services and len(services) > 0:
                    service = services[0]
                    service_name = service.get("T√™n d·ªãch v·ª•", service_name)
                    price_range = service.get("Gi√° khuy·∫øn m√£i", "")
                    discount = service.get("Gi·∫£m gi√°", "")
                    
                    if is_vietnamese:
                        return self._append_booking_and_learn_more(
                            f"üí∞ D·ªãch v·ª• {service_name} c·ªßa ch√∫ng t√¥i c√≥ gi√° {price_range}. "
                            f"{'Hi·ªán ƒëang gi·∫£m gi√° ' + discount + '.' if discount else ''} "
                            f"Vui l√≤ng ƒë·∫∑t l·ªãch h·∫πn ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n t·∫°i Ph√≤ng kh√°m Nha khoa PrimeCare.",
                            None, is_vietnamese
                        )
                    else:
                        return self._append_booking_and_learn_more(
                            f"üí∞ Our {service_name} service costs {price_range}. "
                            f"{'We currently have a ' + discount + ' discount.' if discount else ''} "
                            f"Please schedule an appointment for a more detailed consultation at PrimeCare Dental Clinic.",
                            None, is_vietnamese
                        )
            
            # Default pricing response
            if is_vietnamese:
                return self._append_booking_and_learn_more(
                    f"üí∞ ƒê·ªëi v·ªõi {query}, chi ph√≠ c·ªßa ch√∫ng t√¥i th∆∞·ªùng dao ƒë·ªông t√πy thu·ªôc v√†o th·ªß thu·∫≠t c·ª• th·ªÉ v√† m·ª©c ƒë·ªô ph·ª©c t·∫°p. "
                    f"H√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v√† b√°o gi√° ch√≠nh x√°c t·∫°i Ph√≤ng kh√°m Nha khoa PrimeCare.",
                    None, is_vietnamese
                )
            else:
                return self._append_booking_and_learn_more(
                    f"üí∞ For {query}, our prices typically vary depending on the specific procedure and complexity. "
                    f"Please contact us for detailed consultation and accurate pricing at PrimeCare Dental Clinic.",
                    None, is_vietnamese
                )
        elif is_appointment_query:
            if is_vietnamese:
                return self._append_booking_and_learn_more(f"üïí Ph√≤ng kh√°m Nha khoa PrimeCare m·ªü c·ª≠a t·ª´ Th·ª© Hai ƒë·∫øn Th·ª© S√°u (8:00-20:00), Th·ª© B·∫£y (8:00-18:00) v√† Ch·ªß Nh·∫≠t (8:00-17:00). Ch√∫ng t√¥i th∆∞·ªùng c√≥ th·ªÉ s·∫Øp x·∫øp l·ªãch h·∫πn m·ªõi trong v√≤ng 1-2 ng√†y. B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch h·∫πn cho nhu c·∫ßu nha khoa c·ªßa m√¨nh kh√¥ng?", None, is_vietnamese)
            else:
                return self._append_booking_and_learn_more(f"üïí PrimeCare Dental Clinic is open Monday-Friday (8AM-8PM), Saturday (8AM-6PM), and Sunday (8AM-5PM). We can usually accommodate new appointments within 1-2 days. Would you like to schedule an appointment for your dental needs?", None, is_vietnamese)
        else:
            return self._generate_response_with_template("service", query)
        
    def process_query(self, query: str) -> Dict[str, str]:
        """Process a user query and return a response"""
        # Record user message
        self.conversation_history.append(Message(role="user", content=query))
        
        # Determine which agent should respond
        self.current_role = self._determine_role(query)
        
        # Generate response based on agent role
        if self.current_role == AgentRole.DENTAL_CONSULTANT:
            response = self._generate_dental_response(query)
            agent_type = "Dental Consultant" if not self._is_vietnamese(query) else "Chuy√™n vi√™n t∆∞ v·∫•n nha khoa"
        else:
            response = self._generate_service_response(query)
            agent_type = "Customer Service" if not self._is_vietnamese(query) else "D·ªãch v·ª• kh√°ch h√†ng"
            
        # Record assistant message
        self.conversation_history.append(Message(
            role="assistant", 
            content=response,
            agent_type=self.current_role
        ))
        
        return {"response": response, "agent_type": agent_type}

# Example usage when run directly
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="PrimeCare Dental Chatbot")
    parser.add_argument("--dental-data", default="data/news-detail.json", help="Path to dental articles JSON file")
    parser.add_argument("--doctor-data", default="data/doctors.json", help="Path to doctor information JSON file")
    parser.add_argument("--price-data", default="data/service-prices.json", help="Path to service prices JSON file")
    parser.add_argument("--financial-data", default="data/financial_services.json", help="Path to financial services JSON file")
    
    args = parser.parse_args()
    
    try:
        print("Kh·ªüi t·∫°o tr·ª£ l√Ω nha khoa PrimeCare...")
        
       # Ki·ªÉm tra xem c√°c t·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(args.dental_data):
            raise FileNotFoundError(f"Dental data file not found: {args.dental_data}")
        if not os.path.exists(args.doctor_data):
            raise FileNotFoundError(f"Doctor data file not found: {args.doctor_data}")
        if not os.path.exists(args.price_data):
            raise FileNotFoundError(f"Price data file not found: {args.price_data}")
        if not os.path.exists(args.financial_data):
            raise FileNotFoundError(f"Financial data file not found: {args.financial_data}")
        
        # Kh·ªüi t·∫°o data processor v√† chatbot
        data_processor = DataProcessor(
            dental_path=args.dental_data,
            doctor_path=args.doctor_data,
            price_path=args.price_data,
            financial_path=args.financial_data
        )
        chatbot = DentalChatbot(data_processor)
        
        print("Kh·ªüi t·∫°o ho√†n t·∫•t!")
        print("\nTr·ª£ l√Ω nha khoa PrimeCare (G√µ 'exit' ƒë·ªÉ tho√°t)")
        print("=" * 50)
        
        # Interactive chat loop
        while True:
            try:
                user_input = input("\nB·∫°n: ")
                
                if user_input.lower() == 'exit':
                    if chatbot._is_vietnamese(user_input):
                        print("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Tr·ª£ l√Ω nha khoa PrimeCare. T·∫°m bi·ªát! üëã")
                    else:
                        print("Thank you for using PrimeCare Dental Assistant. Goodbye! üëã")
                    break
                    
                # Process query directly through the chatbot
                result = chatbot.process_query(user_input)
                
                # Print the response along with agent type
                print(f"\n[{result['agent_type']}]")
                print(f"Tr·ª£ l√Ω: {result['response']}")
            except Exception as e:
                print(f"\nL·ªói x·ª≠ l√Ω truy v·∫•n: {str(e)}")
                print("Vui l√≤ng th·ª≠ c√¢u h·ªèi kh√°c.")
    except Exception as e:
        print(f"L·ªói kh·ªüi t·∫°o chatbot: {str(e)}")
        print("Vui l√≤ng ki·ªÉm tra c√°c t·ªáp d·ªØ li·ªáu v√† th∆∞ vi·ªán ph·ª• thu·ªôc.")
