class Chatbot {
    constructor() {
        this.container = document.querySelector('.chatbot-container');
        this.toggleBtn = document.querySelector('.chatbot-toggle');
        this.minimizeBtn = document.querySelector('.chatbot-minimize');
        this.input = document.querySelector('.chatbot-input');
        this.sendBtn = document.querySelector('.chatbot-send');
        this.body = document.querySelector('.chatbot-body');
        this.loading = document.querySelector('.chatbot-loading');
        
        this.isOpen = false;
        this.isProcessing = false;

        // ƒê·∫£m b·∫£o c√°c elements t·ªìn t·∫°i tr∆∞·ªõc khi kh·ªüi t·∫°o
        if (!this.container || !this.toggleBtn) {
            console.error('Chatbot elements not found');
            return;
        }
        
        // ƒê·∫£m b·∫£o container ƒë∆∞·ª£c hi·ªÉn th·ªã
        this.container.style.display = 'flex';
        
        this.initializeEventListeners();
        this.loadChatHistory(); // Kh√¥i ph·ª•c l·ªãch s·ª≠ chat khi kh·ªüi t·∫°o
        this.restoreChatbotState(); // Kh√¥i ph·ª•c tr·∫°ng th√°i m·ªü/thu nh·ªè
        this.ensureWelcomeMessage(); // ƒê·∫£m b·∫£o lu√¥n c√≥ c√¢u ch√†o ƒë·∫ßu ti√™n
    }
    
    initializeEventListeners() {
        // Toggle chatbot
        this.toggleBtn.addEventListener('click', () => this.toggleChatbot());

        // Minimize chatbot
        this.minimizeBtn.addEventListener('click', () => this.minimizeChatbot());
        
        // Send message on button click
        this.sendBtn.addEventListener('click', () => this.sendMessage());

        // Send message on Enter key
        this.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
        }
    });
    }
    
    toggleChatbot() {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
            this.container.classList.remove('minimized');
            this.container.classList.add('active');
            this.toggleBtn.style.display = 'none';
            this.input.focus();
        } else {
            this.container.classList.remove('active');
            this.toggleBtn.style.display = 'flex';
        }
        this.saveChatbotState();
    }
    
    minimizeChatbot() {
        this.container.classList.toggle('minimized');
        if (this.container.classList.contains('minimized')) {
            this.isOpen = false;
            this.container.classList.remove('active');
            this.toggleBtn.style.display = 'flex';
        }
        this.saveChatbotState();
    }
    
    showWelcomeMessage() {
        const welcomeMessage = {
            text: "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Nha khoa PrimeCare. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√¥ng tin v·ªÅ c√°c d·ªãch v·ª•, b√°c sƒ© c·ªßa ch√∫ng t√¥i ho·∫∑c gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ nha khoa. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üòä",
            time: new Date().toLocaleTimeString()
        };
        this.addMessage(welcomeMessage.text, 'bot', welcomeMessage.time);
    }
    
    async sendMessage() {
        const message = this.input.value.trim();
        if (!message || this.isProcessing) return;
        
        // Add user message
        this.addMessage(message, 'user');
        this.input.value = '';
        
        // Show loading indicator
        this.isProcessing = true;
        this.loading.classList.add('active');
        
        try {
            const response = await this.getChatbotResponse(message);
            this.addMessage(response.response, 'bot');
        } catch (error) {
            console.error('Error:', error);
            this.addMessage('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
        } finally {
            this.isProcessing = false;
            this.loading.classList.remove('active');
        }
    }
    
    async getChatbotResponse(message) {
        try {
            const response = await fetch('/chatbot/api/', {
                method: 'POST',
            headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCsrfToken()
                },
                body: JSON.stringify({ message })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching chatbot response:', error);
            throw error;
        }
    }

    getCsrfToken() {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [name, value] = cookie.trim().split('=');
            if (name === 'csrftoken') {
                return value;
                }
        }
        return '';
    }
    
    addMessage(text, sender, time = new Date().toLocaleTimeString()) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const messageText = document.createElement('div');
        messageText.className = 'message-text';
        messageText.innerHTML = this.formatMessage(text);
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = time;
        
        messageDiv.appendChild(messageText);
        messageDiv.appendChild(messageTime);
        
        this.body.appendChild(messageDiv);
        this.scrollToBottom();
        this.saveChatHistory(); // L∆∞u l·∫°i l·ªãch s·ª≠ chat m·ªói khi c√≥ tin nh·∫Øn m·ªõi
    }
    
    formatMessage(text) {
        // Convert markdown links to HTML
        text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
        
        // Convert markdown bold to HTML
        text = text.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
        
        // Convert markdown italic to HTML
        text = text.replace(/\*([^*]+)\*/g, '<em>$1</em>');
        
        // Convert markdown headings to HTML
        text = text.replace(/^### (.*$)/gm, '<h3>$1</h3>');
        text = text.replace(/^## (.*$)/gm, '<h2>$1</h2>');
        
        // Convert line breaks to HTML
        text = text.replace(/\n/g, '<br>');
        
        return text;
    }
    
    scrollToBottom() {
        this.body.scrollTop = this.body.scrollHeight;
    }

    saveChatHistory() {
        localStorage.setItem('primecare_chat_history', this.body.innerHTML);
    }

    loadChatHistory() {
        const history = localStorage.getItem('primecare_chat_history');
        if (history) {
            this.body.innerHTML = history;
        }
    }

    ensureWelcomeMessage() {
        // N·∫øu ch∆∞a c√≥ c√¢u ch√†o ·ªü ƒë·∫ßu, th√™m v√†o ƒë·∫ßu ƒëo·∫°n chat
        const firstMsg = this.body.querySelector('.bot-message .message-text');
        const welcomeText = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Nha khoa PrimeCare. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√¥ng tin v·ªÅ c√°c d·ªãch v·ª•, b√°c sƒ© c·ªßa ch√∫ng t√¥i ho·∫∑c gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ nha khoa. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üòä";
        if (!firstMsg || !firstMsg.textContent.includes("Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Nha khoa PrimeCare")) {
            // Th√™m v√†o ƒë·∫ßu
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message bot-message';
            const messageText = document.createElement('div');
            messageText.className = 'message-text';
            messageText.innerHTML = welcomeText;
            const messageTime = document.createElement('div');
            messageTime.className = 'message-time';
            messageTime.textContent = new Date().toLocaleTimeString();
            messageDiv.appendChild(messageText);
            messageDiv.appendChild(messageTime);
            this.body.insertBefore(messageDiv, this.body.firstChild);
            this.saveChatHistory();
        }
    }

    saveChatbotState() {
        // L∆∞u tr·∫°ng th√°i m·ªü/thu nh·ªè v√†o localStorage
        localStorage.setItem('primecare_chatbot_isOpen', this.isOpen ? '1' : '0');
        localStorage.setItem('primecare_chatbot_minimized', this.container.classList.contains('minimized') ? '1' : '0');
    }

    restoreChatbotState() {
        // Kh√¥i ph·ª•c tr·∫°ng th√°i m·ªü/thu nh·ªè t·ª´ localStorage
        const isOpen = localStorage.getItem('primecare_chatbot_isOpen');
        const minimized = localStorage.getItem('primecare_chatbot_minimized');
        if (isOpen === '1') {
            this.isOpen = true;
            this.container.classList.add('active');
            this.toggleBtn.style.display = 'none';
        } else {
            this.isOpen = false;
            this.container.classList.remove('active');
            this.toggleBtn.style.display = 'flex';
        }
        if (minimized === '1') {
            this.container.classList.add('minimized');
        } else {
            this.container.classList.remove('minimized');
        }
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.chatbot = new Chatbot();
});